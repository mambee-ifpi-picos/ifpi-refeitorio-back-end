generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menu {
  id          Int      @id @default(autoincrement())
  meal        String // alterar para "type" com os valores presentes no enumerator
  description String?
  state       Boolean  @default(true)
  date        DateTime @db.Date

  appointment Appointment[]
  items       Items[]       @relation("ItemsToMenu")

  // atributos de horário de "marcar presença" no menu: máximo e mínimo

  @@map("menu")
}

model Items {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  menus     Menu[]   @relation("ItemsToMenu")

  @@map("items")
}

// model TypeUser {
//   id   Int @id @default(autoincrement())
//   type Int

//   users User[]
// }

model User {
  name         String
  registration String  @id @unique
  course       String?
  email        String  @unique
  status       Boolean @default(true)
  type         Int

  // type   TypeUser @relation(fields: [typeId], references: [id])
  // typeId Int

  appointment Appointment[]
}

model Appointment {
  id       Int     @id @default(autoincrement())
  presence Boolean @default(false)

  user   User   @relation(fields: [userId], references: [registration])
  userId String

  menu   Menu @relation(fields: [menuId], references: [id])
  menuId Int

  absence Absence?
}

model Absence {
  id          Int      @id @default(autoincrement())
  // date        DateTime @db.Date
  observation String
  active      Boolean

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int         @unique
}

model Holidays {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date
}

model Settings {
  id                     Int    @id @default(autoincrement())
  minimumAppointmentTime String
  maximumAppointmentTime String
  vacancies              Int
}
